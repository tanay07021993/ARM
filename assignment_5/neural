 AREA     appcode, CODE, READONLY
     export __main	 
     IMPORT printMsg
	IMPORT Printtruthtable
     		 
	 ENTRY 
__main  function	
	      VLDR.F32 S0 , =1 ;x0 
          VLDR.F32 S1 , =1 ;x1 
          VLDR.F32 S2 , =1 ;x2 	  
          ADR.W r2 , BranchTable_Byte
		  MOV r3 , #0                   ;r1 is being used to select the logic
		  TBB [r2 , r3 ]
AND_LOGIC         VLDR.F32 S28 ,=-0.1 	; W1   
		          VLDR.F32 S29 ,=0.2  ; W2   
                  VLDR.F32	S30 ,=0.2 	; W3
                  VLDR.F32 S31 ,=-0.2   ;BIAS   
                   B  WEIGHT_CALCULATION
				   
OR_LOGIC          VLDR.F32 S28 ,=-0.1	;W1   
		          VLDR.F32 S29 ,=0.7  ;W2   
                  VLDR.F32	S30 ,=0.7 	;W3
                  VLDR.F32 S31 ,=-0.1  ;BIAS				  
                   B  WEIGHT_CALCULATION
				   
NOT_LOGIC         VLDR.F32 S2 , =0
                  VLDR.F32 S28 ,=0.5 	; W1   
		          VLDR.F32 S29 ,=-0.7  ;W2   
                  VLDR.F32	S30 ,=0 	; W3
                  VLDR.F32 S31 ,=0.1   ;BIAS   
                   B  WEIGHT_CALCULATION
				   
NAND_LOGIC         VLDR.F32 S28 ,=0.6 	; W1   
		           VLDR.F32 S29 ,=-0.8  ; W2   
                   VLDR.F32	S30 ,=-0.8 	; W3
                   VLDR.F32 S31 ,=0.3   ;BIAS   
                   B  WEIGHT_CALCULATION


NOR_LOGIC          VLDR.F32 S28 ,=0.5 	; W1   
		           VLDR.F32 S29 ,=-0.7  ; W2   
                   VLDR.F32	S30 ,=-0.7 	; W3
                   VLDR.F32 S31 ,=0.1   ;BIAS   
                   B  WEIGHT_CALCULATION



XOR_LOGIC         VLDR.F32 S28 ,=-5 	;WEIGHT W1   
		          VLDR.F32 S29 ,=20  ;WEIGHT W2   
                  VLDR.F32	S30 ,=10 	;WEIGHT W3
                  VLDR.F32 S31 ,=1   ;BIAS   
                   B  WEIGHT_CALCULATION

XNOR_LOGIC        VLDR.F32 S28 ,=-5 	;WEIGHT W1   
		          VLDR.F32 S29 ,=20  ;WEIGHT W2   
                  VLDR.F32	S30 ,=10 	;WEIGHT W3
                  VLDR.F32 S31 ,=1   ;BIAS   
                   B  WEIGHT_CALCULATION


		  
WEIGHT_CALCULATION	  VMUL.F32  S14 , S0 ,S28  
                      VADD.F32  S15  , S15 ,S14
		              VMUL.F32  S14 , S1 ,S29  
					  VADD.F32  S15  , S15 ,S14
					  VMUL.F32  S14 , S2 ,S30
					  VADD.F32  S15  , S15 ,S14
                      VADD.F32  S15 , S15,S31
                      B SIGMOID					  
BranchTable_Byte		  
    DCB   0		  
    DCB   ((OR_LOGIC - AND_LOGIC)/2)	
	DCB   ((NOT_LOGIC - AND_LOGIC)/2)	
	DCB   ((NAND_LOGIC - AND_LOGIC)/2)
	DCB   ((NOR_LOGIC - AND_LOGIC)/2)
	DCB   ((XOR_LOGIC - AND_LOGIC)/2)
	DCB   ((XNOR_LOGIC - AND_LOGIC)/2)
	
	      	
SIGMOID       VMOV.F32 S1 , S15  ;S1 will keep reference of x
	          ;MOV  r3 ,#0x3f800000   ;Taking constant number 1.
	          ;STR  r3 , =1 ;
			  VLDR.F32 S0 ,=1  ;
			  VLDR.F32 S4 ,=1  ;
			  VLDR.F32 S5 ,=1  ;
			  VLDR.F32 S6 ,=1  ;
			  VLDR.F32 S7 ,=1  ;
              VLDR.F32 S31 ,=1  ;     
			  VLDR.F32 S30 ,=1  ;
			  VLDR.F32 S29 ,=1  ;
			  VLDR.F32 S28 ,=1  ;
              B   SERIES			  
			  ;S3 will have Sum and S31 iS a temporary regiSter for it
			  ;S5 will Store diviSon value and S30 iS a temporary regiSter for it
			  ;S4 will Store value of factorial and  S28 iS a temporary regiSter for it
CHECK_SERIES_MULTIPLICATION			  VMUL.F32 S29 , S0 ,S1
			                          VMRS r1 , FPSCR
			                          AND  r1 ,  r1 , #28
			                          CMP  r1 , #17	
                                                  IT LT									  
			                          BLT  FLOW1	
						  B  STOP
CHECK_SERIES_SUM_VALIDATION           VADD.F32 S31 , S5 , S3
                                      VMRS r1 , FPSCR          ;Storing FPSCR to R1 
				      AND  r1 ,  r1 , #28       
			              CMP  r1 , #17	       ;checking for underflow or overflow 
                                      IT  LT			;Stop if invalid reSultS						  
			              BLT  SERIES	         ;Same for all validationS
				      B  STOP
CHECK_DIVISION_VALIDATION			  VDIV.F32	S30 , S0 , S4					  
						  VMRS r1 , FPSCR
						  AND  r1 ,  r1 , #28
			                          CMP  r1 , #17	
                                      		  IT  LT									  
			                          BLT  FLOW3	
						  B  STOP
									  
CHECK_SERIES_FACTORIAL_VALIDATION     VMUL.F32   S28 , S4 ,S6
                                      VMRS r1 , FPSCR
				      VADD.F32   S6 , S6 , S7
				      AND  r1 ,  r1 , #28
			              CMP  r1 , #17	
                                      IT  LT									  
			              BLT  FLOW2	
				      B  STOP						

SERIES		 VMOV.F32	  S3 ,S31                 ; copy valid value of S3 and S31 iS a temporary regiSter

	        B CHECK_SERIES_MULTIPLICATION		 
FLOW1		VMOV.F32    S0 , S29                    ; copy valid value to S0  and  S29 iS atemporary regiSter

                B CHECK_SERIES_FACTORIAL_VALIDATION ; 
		
FLOW2		VMOV.F32     S4  , S28    ; S4 StoreS factorial and S28 iS a temporary regiSter

                B        CHECK_DIVISION_VALIDATION
		
FLOW3		 VMOV.F32      S5  , S30                  ;S30 iS a temporary regiSter and S5 will Store value of diviSion

	        B       CHECK_SERIES_SUM_VALIDATION
		
STOP		   VLDR.F32 S0 ,= 1 ; Stop program
               VDIV.F32 S3 , S0 ,S3
			   VADD.F32 S3 ,S3,S0 
			   VDIV.F32 S3 , S0 , S3
               B     OUTPUT	


OUTPUT     VLDR.F32 S16 , =0.5
           VCMP.F32     S3 , S16  
           VMRS r1 , FPSCR                    ;output iS kept  in r0 .LOGIC LSL AND CMP ARE APPLIED ON FPSR FLAGS WHOOSE VALUE IS IN R1
           MOV r2 , #1
		   LSL r2 , r2 ,#31
		   AND r1 , r1, r2
		   CMP r1 , #0
		   ITE  HI
		   MOVHI r0 , #0
		   MOVLS r0 , #1
		   BL printMsg
 ADR.W r8 , Table_Byte   
  TBB [r8 , r9 ]     
input2    VLDR.F32 s11 , =1 ;X0 DATA
          VLDR.F32 s12 , =0 ;X1 DATA
          VLDR.F32 s13 , =1 ;X2 DATA
          ADD r9 , r9 , #1                    
  B start
  
input3    VLDR.F32 s11 , =1 ;X0 DATA
          VLDR.F32 s12 , =1 ;X1 DATA
          VLDR.F32 s13 , =0 ;X2 DATA   
          ADD r9 , r9 , #1                   
  B start
  
input4    VLDR.F32 s11 , =1 ;X0 DATA
          VLDR.F32 s12 , =1 ;X1 DATA
          VLDR.F32 s13 , =1 ;X2 DATA
          ADD r9 , r9 , #1                   
   B start
 
                MOV R0 , R7
                MOV R7 ,#0 
                BL Printtruthtable
                CMP R12 ,#6
                IT HI
                BHI stop1
                ADD R12 ,R12 ,#1
                B start
stop1           B   stop1 
Table_Byte   
        DCB   0   
        DCB   ((input3-input2)/2) 
        DCB   ((input4-input2)/2) 
        DCB   ((stop-input2)/2)   
      endfunc
    end
